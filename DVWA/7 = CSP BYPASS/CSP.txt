CSP

O CSP (Content Security Policy, ou Política de Segurança de Conteúdo) 
é um mecanismo de segurança implementado em navegadores para ajudar a 
prevenir ataques como Cross-Site Scripting (XSS), injeção de dados e clickjacking. 
Ele permite que administradores de sites definam políticas sobre quais tipos de 
conteúdo podem ser carregados e de quais fontes, restringindo o que é permitido na página.

Aqui está uma visão geral de como o CSP funciona:

1. Definição de Política

    O administrador de um site define uma política de segurança através do 
    cabeçalho HTTP Content-Security-Policy ou por meio de uma meta tag no HTML. 
    Este cabeçalho especifica de onde o navegador pode carregar vários tipos de recursos, 
    como scripts, estilos, imagens, etc.

    Exemplo de cabeçalho CSP:

    Content-Security-Policy: default-src 'self'; script-src 'self' https://apis.google.com; img-src 'self' data:;



2. Tipos de Diretivas

As políticas do CSP são compostas por diretivas que controlam diferentes tipos de recursos. Alguns exemplos incluem:

    default-src: Fonte padrão para todos os recursos não especificados.
    script-src: Controla de onde os scripts JavaScript podem ser carregados.
    style-src: Especifica de onde os arquivos de estilo (CSS) podem ser carregados.
    img-src: Define de onde imagens podem ser carregadas.
    frame-src: Determina de onde frames (ex. <iframe>) podem ser carregados.

3. Prevenção de Ataques

O CSP ajuda a prevenir ataques ao:

    Bloquear scripts não autorizados: Se um script injetado por um ataque XSS tentar rodar, 
    mas não estiver vindo de uma fonte permitida pela política, ele será bloqueado.
    Restringir fontes de conteúdo: Só recursos de domínios confiáveis são permitidos, 
    dificultando a execução de código malicioso de fontes desconhecidas.

4. Reportes de Violação

O CSP permite o envio de relatórios de violação de política através da diretiva 
report-uri ou report-to. Quando ocorre uma violação (como o carregamento de um script 
de uma fonte não permitida), o navegador pode enviar um relatório para um endpoint definido, 
permitindo que o administrador investigue.

Exemplo de diretiva de reporte:

Content-Security-Policy: default-src 'self'; report-uri /csp-violations-report;

#####################################################################################

Como implementar no HTML

Obs: Se o código de execução estiver sendo executado a partir do
HTML, é necessário implementar dentro meta<>

<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self' https://fonts.googleapis.com; img-src 'self'; font-src 'self' https://fonts.gstatic.com;">

    default-src 'self': Apenas recursos carregados do mesmo domínio são permitidos por padrão.
    script-src 'self': Apenas scripts hospedados no mesmo domínio podem ser executados.
    style-src 'self': Apenas arquivos de estilo (CSS) hospedados no mesmo domínio podem ser carregados.
    img-src 'self': Apenas imagens hospedadas no mesmo domínio podem ser exibidas.
    font-src 'self': Apenas fontes carregados no mesmo domínio. 




1. Usar a Meta Tag CSP

No cabeçalho da sua página HTML, você pode adicionar a meta tag 
Content-Security-Policy para definir as regras de segurança.


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Meta tag para Content Security Policy -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self';">
    
    <title>Exemplo de CSP em HTML</title>
</head>
<body>
    <h1>Implementando CSP com HTML</h1>
    <script src="script.js"></script>
</body>
</html>

2. Entendendo as Diretivas

    default-src 'self': Apenas recursos carregados do mesmo domínio são permitidos por padrão.
    script-src 'self': Apenas scripts hospedados no mesmo domínio podem ser executados.
    style-src 'self': Apenas arquivos de estilo (CSS) hospedados no mesmo domínio podem ser carregados.
    img-src 'self': Apenas imagens hospedadas no mesmo domínio podem ser exibidas.

3. Permitir Conteúdo Externo

Se você precisar permitir recursos externos, como scripts ou estilos de fontes 
confiáveis, você pode incluir URLs específicas na diretiva.

Exemplo de uma política mais flexível:

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Permitir scripts do Google APIs e fontes de Google Fonts -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' https://apis.google.com; style-src 'self' https://fonts.googleapis.com; img-src 'self' data:;">
    
    <title>Exemplo de CSP com Recursos Externos</title>
</head>
<body>
    <h1>Implementando CSP com Fontes Externas</h1>
    <script src="https://apis.google.com/js/platform.js" async defer></script>
</body>
</html>


Neste exemplo:

    Scripts externos de https://apis.google.com são permitidos.
    Estilos de https://fonts.googleapis.com (como fontes do Google) são permitidos.
    Imagens inline baseadas em data: também são permitidas.


4. Modo Report-Only no HTML

Se você quiser apenas monitorar violações de CSP sem bloquear o conteúdo, 
pode usar a diretiva Content-Security-Policy-Report-Only em vez de Content-Security-Policy.    


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Relatório de violações CSP sem aplicar bloqueios -->
    <meta http-equiv="Content-Security-Policy-Report-Only" content="default-src 'self'; script-src 'self'; style-src 'self'; report-uri /csp-report-endpoint;">
    
    <title>Exemplo de Report-Only CSP</title>
</head>
<body>
    <h1>Monitorando CSP sem bloquear conteúdo</h1>
</body>
</html>


#####################################################################################

Como implementar no PHP

1. Definir o Cabeçalho HTTP CSP

No início do seu arquivo PHP (antes de qualquer saída de conteúdo), 
use a função header() para definir o cabeçalho Content-Security-Policy.

Exemplo simples:

<?php

// Defina o cabeçalho Content-Security-Policy

    header("Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self';");

?>

2. Entendendo as Diretivas

No exemplo acima, o CSP está especificando que:

    default-src 'self': Todos os tipos de conteúdo, por padrão, só podem ser 
    carregados do mesmo domínio da página (ou seja, o próprio servidor).

    script-src 'self': Apenas scripts (JavaScript) hospedados no mesmo domínio podem ser executados.

    style-src 'self': Apenas estilos (CSS) hospedados no mesmo domínio podem ser carregados.

    img-src 'self': Apenas imagens hospedadas no mesmo domínio podem ser exibidas.


Você pode ajustar as diretivas para incluir fontes externas, se necessário. 
Por exemplo, para permitir que scripts ou estilos sejam carregados de outras 
fontes seguras, você pode adicionar URLs específicas:

<?php
header("Content-Security-Policy: default-src 'self'; script-src 'self' https://apis.google.com; style-src 'self' https://fonts.googleapis.com; img-src 'self' https://example.com;");
?>

